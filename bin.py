import base64
import subprocess
from pathlib import Path
import sys
import argparse
import zlib


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("target", help="build target")
    args = parser.parse_args()
    src: str = args.target
    stem: str = Path(src).stem
    subprocess.run(["g++-10", "-std=c++20", "-O2", src, "-o", stem])
    binary: str = str(base64.b85encode(zlib.compress(
        Path(stem).read_bytes())), encoding="utf-8")
    Path(stem + ".py").write_text("# This code is generated by [Atcoder_base64](https://github.com/kyomukyomupurin/AtCoder_base64)\n\n"
                                  "import base64\n"
                                  "import subprocess\n"
                                  "from pathlib import Path\n"
                                  "import zlib\n\n\n"
                                  f"binary = \"{binary}\"\n"
                                  "Path(\"kyomu\").write_bytes(zlib.decompress(base64.b85decode(binary)))\n"
                                  "Path(\"kyomu\").chmod(0o755)\n"
                                  "subprocess.run(\"./kyomu\")\n\n"
                                  "# Original source code : \n"
                                  "\"\"\"\n"
                                  f"{Path(src).read_text()}\n"
                                  "\"\"\""
                                  )
    sz: int = sys.getsizeof(binary)
    print(
        f"The size of compressed and encoded binary is {sz / 1000:.1f} KB, {sz / 5120:.1f} % of limit.")
