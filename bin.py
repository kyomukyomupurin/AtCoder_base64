import base64
import subprocess
from pathlib import Path
import sys
import argparse


parser = argparse.ArgumentParser()
parser.add_argument('target_file', help='cpp file you want to convert')
parser.add_argument('-o', '--original', action='store_true',
                    help='insert an original code')
args = parser.parse_args()
cpp_file = args.target_file

subprocess.run(['g++', '-std=c++17', '-O2',
                cpp_file, '-o', Path(cpp_file).stem])

ascii_bin = open(Path(cpp_file).stem, 'rb').read()
ascii_bin = str(base64.b85encode(ascii_bin), encoding='utf-8')
original_code = open(cpp_file, 'r').read()
generated_code = Path(cpp_file).stem + ".py"

with open(generated_code, 'w') as f:
    f.write("# This code is generated by [Atcoder_base64](https://github.com/kyomukyomupurin/AtCoder_base64)\n")
    if args.original:
        f.write("# Original source code : \n\n\"\"\"\n" + original_code + "\n\"\"\"\n\n")
    f.write("import base64\nimport subprocess\n\n\nexe_bin = \"" + ascii_bin +
            "\"\n\nopen(\"./kyomu\", \'wb\').write(base64.b85decode(exe_bin))\nsubprocess.run([\"chmod +x ./kyomu\"], shell=True)\nsubprocess.run([\"./kyomu\"], shell=True)")

sz = sys.getsizeof(ascii_bin)
print("The size of compressed binary is {:.1f} KB, {:.1f} % of limit.".format(sz / 1000, sz / 5120))