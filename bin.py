from pathlib import Path
import argparse
from sys import getsizeof
from base64 import b85encode
from zlib import compress
from hashlib import sha256


parser = argparse.ArgumentParser()
parser.add_argument("target", help="build target")
args = parser.parse_args()
target: str = args.target
stem: str = Path(target).stem
binary: str = str(
    b85encode(compress(Path(stem).read_bytes())), encoding="utf-8")
file_hash: str = sha256(Path(target).read_bytes()).hexdigest()
Path(f"{stem}.py").write_text("# This code is generated by [Atcoder_base64](https://github.com/kyomukyomupurin/AtCoder_base64)\n\n"
                              "from base64 import b85decode\n"
                              "import subprocess\n"
                              "from pathlib import Path\n"
                              "from zlib import decompress\n\n\n"
                              f"binary = \"{binary}\"\n"
                              f"Path(\"{file_hash}.bin\").write_bytes(decompress(b85decode(binary)))\n"
                              f"Path(\"{file_hash}.bin\").chmod(0o755)\n"
                              f"subprocess.run(\"./{file_hash}.bin\")\n\n"
                              "# Original source code:\n"
                              "\"\"\"\n"
                              f"{Path(target).read_text()}\n"
                              "\"\"\""
                              )
sz: int = getsizeof(Path(f"{stem}.py").read_text())
print(
    f"The size of {stem}.py is {sz / 1000:.1f}KB, {sz / 5120:.1f}% of limit.")
